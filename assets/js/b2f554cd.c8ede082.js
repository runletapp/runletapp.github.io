"use strict";(self.webpackChunkrunlet_website=self.webpackChunkrunlet_website||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"monitoring-processes-on-raspberry-pi","metadata":{"permalink":"/blog/monitoring-processes-on-raspberry-pi","editUrl":"https://github.com/runletapp/website/edit/main/blog/2020-04-01-monitoring-processes-on-raspberry-pi.md","source":"@site/blog/2020-04-01-monitoring-processes-on-raspberry-pi.md","title":"Monitoring processes on Raspberry PI remotely with Runlet and htop","description":"htop is an interactive text-mode process viewer for Unix systems that is highly configurable and gives the option to view information such as CPU load, memory consumption, hostname, tasks, load averages, and uptime. It can be used alongside Runlet to monitor Raspberry PI processes remotely.","date":"2020-04-01T00:00:00.000Z","formattedDate":"April 1, 2020","tags":[{"label":"Runlet","permalink":"/blog/tags/runlet"},{"label":"Tutorial","permalink":"/blog/tags/tutorial"},{"label":"Raspberry Pi","permalink":"/blog/tags/raspberry-pi"}],"readingTime":1.48,"hasTruncateMarker":true,"authors":[{"name":"Vandr\xe9 Leal C\xe2ndido","title":"Core Maintainer","url":"https://github.com/vandreleal","imageURL":"https://avatars0.githubusercontent.com/u/9258892?s=460&u=7e0b51687eb19ea943975cb29428627e255e0fb9&v=4"}],"frontMatter":{"slug":"monitoring-processes-on-raspberry-pi","title":"Monitoring processes on Raspberry PI remotely with Runlet and htop","author":"Vandr\xe9 Leal C\xe2ndido","author_title":"Core Maintainer","author_url":"https://github.com/vandreleal","author_image_url":"https://avatars0.githubusercontent.com/u/9258892?s=460&u=7e0b51687eb19ea943975cb29428627e255e0fb9&v=4","tags":["Runlet","Tutorial","Raspberry Pi"]},"nextItem":{"title":"Creating a backup system with Runlet","permalink":"/blog/creating-backup-system"}},"content":"[htop](https://hisham.hm/htop/) is an interactive text-mode process viewer for Unix systems that is highly configurable and gives the option to view information such as CPU load, memory consumption, hostname, tasks, load averages, and uptime. It can be used alongside Runlet to monitor Raspberry PI processes remotely.\\n\\n\x3c!--truncate--\x3e\\n\\n:::note\\n\\nThis example assumes that Runlet is installed and ready to use on all devices.\\n\\n:::\\n\\nThe first step is to get the Raspberry PI name on the network, which is **_raspberrypi_ginger_**. This name is generated automatically by the API when you log in to your account, and the device joins the network.\\n\\n![Step 01](/img/blog/2020-04-01-monitoring-processes-on-raspberry-pi/01.png)\\n\\nWe can now create a job called **pi-htop** that runs the command _htop_ only on **_raspberrypi_ginger_**. The command export _TERM=xterm-256color_ ensures that the terminal emulator is set before htop, but it\u2019s not mandatory.\\n\\n![Step 02](/img/blog/2020-04-01-monitoring-processes-on-raspberry-pi/02.png)\\n\\nThe job **pi-htop** shows up in the list of available jobs when saved, and can be triggered with ease by any online device using either a desktop manager or the CLI command `runlet @run pi-htop`.\\n\\n![Step 03](/img/blog/2020-04-01-monitoring-processes-on-raspberry-pi/03.png)\\n\\nThe initial output of _htop_ shows a list of system processes including PID, user, percentage of CPU and memory used, time in execution, and command.\\n\\n![Step 04](/img/blog/2020-04-01-monitoring-processes-on-raspberry-pi/04.png)\\n\\nThe next image shows all the setup options displayed after pressing key F2. These options can customize meters shown at the top, as well as change display options, colors, and active columns. Navigation using arrow keys is done with no hassle as all keyboard strokes are captured. The key F10 can be pressed at any time to indicate that the setup is done and return to the previous screen.\\n\\n![Step 05](/img/blog/2020-04-01-monitoring-processes-on-raspberry-pi/05.png)\\n\\nWe can also filter processes by keyword pressing F4 on the main screen, which is particularly useful to find and kill undesired processes.\\n\\n![Step 06](/img/blog/2020-04-01-monitoring-processes-on-raspberry-pi/06.png)"},{"id":"creating-backup-system","metadata":{"permalink":"/blog/creating-backup-system","editUrl":"https://github.com/runletapp/website/edit/main/blog/2019-08-27-creating-backup-system.md","source":"@site/blog/2019-08-27-creating-backup-system.md","title":"Creating a backup system with Runlet","description":"In this post I will go through a quick overview of how to manage and run jobs from the command line using Runlet CLI. If you haven\u2019t installed Runlet yet, I recommend you go to the releases page and check out our latest release that best fits your platform (Windows, Mac or Linux). Once installed you\u2019ll need to sign in to link the newly installed daemon to your account.","date":"2019-08-27T00:00:00.000Z","formattedDate":"August 27, 2019","tags":[{"label":"Runlet","permalink":"/blog/tags/runlet"},{"label":"Tutorial","permalink":"/blog/tags/tutorial"},{"label":"Raspberry Pi","permalink":"/blog/tags/raspberry-pi"}],"readingTime":2.395,"hasTruncateMarker":true,"authors":[{"name":"Gustavo Sampaio","title":"Core Maintainer","url":"https://github.com/GustavoKatel","imageURL":"https://avatars0.githubusercontent.com/u/1891977?s=400&u=e33fb29ed6517d25974098a828720bd860b5ce5c&v=4"}],"frontMatter":{"slug":"creating-backup-system","title":"Creating a backup system with Runlet","author":"Gustavo Sampaio","author_title":"Core Maintainer","author_url":"https://github.com/GustavoKatel","author_image_url":"https://avatars0.githubusercontent.com/u/1891977?s=400&u=e33fb29ed6517d25974098a828720bd860b5ce5c&v=4","tags":["Runlet","Tutorial","Raspberry Pi"]},"prevItem":{"title":"Monitoring processes on Raspberry PI remotely with Runlet and htop","permalink":"/blog/monitoring-processes-on-raspberry-pi"},"nextItem":{"title":"Introducing Runlet","permalink":"/blog/introducing-runlet"}},"content":"In this post I will go through a quick overview of how to manage and run jobs from the command line using Runlet CLI. If you haven\u2019t installed Runlet yet, I recommend you go to the [releases page](https://github.com/runletapp/runlet/releases/) and check out our latest release that best fits your platform (Windows, Mac or Linux). Once installed you\u2019ll need to sign in to link the newly installed daemon to your account.\\n\\n\x3c!--truncate--\x3e\\n\\n```shell\\nrunlet @signin\\n```\\n\\nThe QR code is useful if you are on a device with no browser. You can then use your mobile phone to authorize the daemon without having to type boring URLs. Once signed in you will be able to add or remove jobs.\\n\\n### Creating a scheduled job\\n\\nThe first job that we\u2019ll create for our backup system will be responsible to compact and upload a bunch of important files to our backup server. We can create a job from the command line with the following line:\\n\\n```shell\\nrunlet @config\\n```\\n\\nIf you\u2019re using Linux you must run as root\\n\\n```shell\\nsudo runlet @config\\n```\\n\\nThis will open your editor defined in `$EDITOR` (Defaults to `nano`) with the correct configuration file. After closing the file will be merged with the current configuration and synced with the other connected daemons in your account.\\n\\nLet\u2019s define our job as follows:\\n\\n```shell\\nbackup:\\n  script: |\\n    src=/myproject\\n    hash=$(echo -n $src | md5sum | cut -c-32)\\n    timestamp=$(date +\\"%m-%d-%Y-%H-%M\\")\\n    dest=\\"/tmp/$hash-$timestamp.tar.gz\\"\\n    tar -zcvf $dest $src\\n    cp $dest /backups\\n  every: 0 16 * * *\\n```\\n\\nNow save and close the file.\\n\\nThis will create a job called `backup` that will run every day at 4pm. It works by compacting `/myproject` and storing the binaries at `/backups`.\\n\\n:::note\\n\\nNote that this job will run on every connected daemon at the specified time.\\n\\n:::\\n\\nIf you want to manually run the job you can call like this:\\n\\n```shell\\nrunlet @run backup\\n```\\n\\nYou should expect a file created at `/backups`.\\n\\n### Automating backup of arbitrary directories\\n\\nBut what if we want to backup arbitrary directories? We can do that using [job arguments](/docs/job/definition). By passing arguments you can change the behavior of a job before executing it. We use Golang\u2019s strong template engine to process every job script.\\n\\nChange the job to:\\n\\n```shell\\nbackup:\\n  script: |\\n    {{ if gt (len .Args) 1 }}\\n    src=\\"{{ index .Args 1 }}\\"\\n    {{ else }}\\n    src=\\"/myproject\\"\\n    {{ end }}\\n\\n    hash=$(echo -n $src | md5sum | cut -c-32)\\n    timestamp=$(date +\\"%m-%d-%Y-%H-%M\\")\\n    dest=\\"/tmp/$hash-$timestamp.tar.gz\\"\\n    tar -zcvf $dest $src\\n    cp $dest /backups\\n  every: 0 16 * * *\\n```\\n\\nAs we can see on line 3 we check if there are any arguments passed during the call. If we have, we use it as `src`, otherwise we defaults to `/myproject`. We can then call from the command line like this:\\n\\n```shell\\nrunlet @run backup /myproject/node_modules\\n```\\n\\nWe will then backup only the selected directory."},{"id":"introducing-runlet","metadata":{"permalink":"/blog/introducing-runlet","editUrl":"https://github.com/runletapp/website/edit/main/blog/2019-08-25-introducing-runlet.md","source":"@site/blog/2019-08-25-introducing-runlet.md","title":"Introducing Runlet","description":"Runlet is a cloud-based job manager that offers device synchronization and reliable message delivery in a network of connected devices even after connectivity issues. It also provides an easy to use interface to manage jobs, trigger remote executions, and view logs from remotely executed jobs. You can also quickly get a new device started since all configuration files and logs are stored in the cloud and synced after sign in.","date":"2019-08-25T00:00:00.000Z","formattedDate":"August 25, 2019","tags":[{"label":"Runlet","permalink":"/blog/tags/runlet"},{"label":"Announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.82,"hasTruncateMarker":true,"authors":[{"name":"Vandr\xe9 Leal C\xe2ndido","title":"Core Maintainer","url":"https://github.com/vandreleal","imageURL":"https://avatars0.githubusercontent.com/u/9258892?s=460&u=7e0b51687eb19ea943975cb29428627e255e0fb9&v=4"}],"frontMatter":{"slug":"introducing-runlet","title":"Introducing Runlet","author":"Vandr\xe9 Leal C\xe2ndido","author_title":"Core Maintainer","author_url":"https://github.com/vandreleal","author_image_url":"https://avatars0.githubusercontent.com/u/9258892?s=460&u=7e0b51687eb19ea943975cb29428627e255e0fb9&v=4","tags":["Runlet","Announcement"]},"prevItem":{"title":"Creating a backup system with Runlet","permalink":"/blog/creating-backup-system"}},"content":"Runlet is a cloud-based job manager that offers device synchronization and reliable message delivery in a network of connected devices even after connectivity issues. It also provides an easy to use interface to manage jobs, trigger remote executions, and view logs from remotely executed jobs. You can also quickly get a new device started since all configuration files and logs are stored in the cloud and synced after sign in.\\n\\n\x3c!--truncate--\x3e\\n\\nThe desktop distribution includes both the daemon and a full-featured GUI, whereas the ARM distribution includes only the daemon, and is recommended for resource-constrained devices like the [Raspberry Pi](https://www.raspberrypi.org).\\n\\n### Devices\\n\\nYou can view all connected and enabled devices including some basic information such as the percentage of CPU and memory used by the device, virtual memory available, and uptime since session establishment.\\n\\n### Jobs\\n\\nCreating a new job is quick and easy. Fill out the form and save to get the new job listed and available on all your connected devices. You can assign the job to specific devices by using the option `Run at`.\\n\\n- `Local` : run the job in the device in which you are connected (default).\\n- `All` : run the job on all available devices.\\n- `Any` : run the job once on any available device.\\n- `Custom` : run the job on all devices included in the comma-separated list. eg. `fingerwind`, `kickerlove`\\n\\nYou also have the option to view, create and edit jobs directly in the job editor. We use the [YAML](https://yaml.org) data-serialization language to configure jobs in Runlet. The list of all supported attributes can be found on the [docs](/docs/job/definition) page. The resulting log and status of each execution is shown in real-time on any connected device. _Wait, is that secure?_ Yes, all logs are encrypted by the host machine before submission and decrypted once received by another connected device.\\n\\nThe activity panel at the right side includes a brief summary of recently executed jobs and can be hidden under settings.\\n\\n:::note\\n\\nWe only collect basic user information during registration (such as your name, email address, and social media avatar), and we do not share your personal data with any affiliates or service providers.\\n\\n:::"}]}')}}]);