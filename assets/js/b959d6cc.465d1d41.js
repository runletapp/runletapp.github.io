"use strict";(self.webpackChunkrunlet_website=self.webpackChunkrunlet_website||[]).push([[1892],{4137:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,h=p["".concat(u,".").concat(d)]||p[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7880:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(4137)),i=["components"],l={slug:"creating-backup-system",title:"Creating a backup system with Runlet",author:"Gustavo Sampaio",author_title:"Core Maintainer",author_url:"https://github.com/GustavoKatel",author_image_url:"https://avatars0.githubusercontent.com/u/1891977?s=400&u=e33fb29ed6517d25974098a828720bd860b5ce5c&v=4",tags:["Runlet","Tutorial","Raspberry Pi"]},u=void 0,s={permalink:"/blog/creating-backup-system",editUrl:"https://github.com/runletapp/website/edit/main/blog/2019-08-27-creating-backup-system.md",source:"@site/blog/2019-08-27-creating-backup-system.md",title:"Creating a backup system with Runlet",description:"In this post I will go through a quick overview of how to manage and run jobs from the command line using Runlet CLI. If you haven\u2019t installed Runlet yet, I recommend you go to the releases page and check out our latest release that best fits your platform (Windows, Mac or Linux). Once installed you\u2019ll need to sign in to link the newly installed daemon to your account.",date:"2019-08-27T00:00:00.000Z",formattedDate:"August 27, 2019",tags:[{label:"Runlet",permalink:"/blog/tags/runlet"},{label:"Tutorial",permalink:"/blog/tags/tutorial"},{label:"Raspberry Pi",permalink:"/blog/tags/raspberry-pi"}],readingTime:2.395,hasTruncateMarker:!0,authors:[{name:"Gustavo Sampaio",title:"Core Maintainer",url:"https://github.com/GustavoKatel",imageURL:"https://avatars0.githubusercontent.com/u/1891977?s=400&u=e33fb29ed6517d25974098a828720bd860b5ce5c&v=4"}],frontMatter:{slug:"creating-backup-system",title:"Creating a backup system with Runlet",author:"Gustavo Sampaio",author_title:"Core Maintainer",author_url:"https://github.com/GustavoKatel",author_image_url:"https://avatars0.githubusercontent.com/u/1891977?s=400&u=e33fb29ed6517d25974098a828720bd860b5ce5c&v=4",tags:["Runlet","Tutorial","Raspberry Pi"]},prevItem:{title:"Monitoring processes on Raspberry PI remotely with Runlet and htop",permalink:"/blog/monitoring-processes-on-raspberry-pi"},nextItem:{title:"Introducing Runlet",permalink:"/blog/introducing-runlet"}},c={authorsImageUrls:[void 0]},p=[{value:"Creating a scheduled job",id:"creating-a-scheduled-job",level:3},{value:"Automating backup of arbitrary directories",id:"automating-backup-of-arbitrary-directories",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this post I will go through a quick overview of how to manage and run jobs from the command line using Runlet CLI. If you haven\u2019t installed Runlet yet, I recommend you go to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/runletapp/runlet/releases/"},"releases page")," and check out our latest release that best fits your platform (Windows, Mac or Linux). Once installed you\u2019ll need to sign in to link the newly installed daemon to your account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"runlet @signin\n")),(0,o.kt)("p",null,"The QR code is useful if you are on a device with no browser. You can then use your mobile phone to authorize the daemon without having to type boring URLs. Once signed in you will be able to add or remove jobs."),(0,o.kt)("h3",{id:"creating-a-scheduled-job"},"Creating a scheduled job"),(0,o.kt)("p",null,"The first job that we\u2019ll create for our backup system will be responsible to compact and upload a bunch of important files to our backup server. We can create a job from the command line with the following line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"runlet @config\n")),(0,o.kt)("p",null,"If you\u2019re using Linux you must run as root"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"sudo runlet @config\n")),(0,o.kt)("p",null,"This will open your editor defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"$EDITOR")," (Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"nano"),") with the correct configuration file. After closing the file will be merged with the current configuration and synced with the other connected daemons in your account."),(0,o.kt)("p",null,"Let\u2019s define our job as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'backup:\n  script: |\n    src=/myproject\n    hash=$(echo -n $src | md5sum | cut -c-32)\n    timestamp=$(date +"%m-%d-%Y-%H-%M")\n    dest="/tmp/$hash-$timestamp.tar.gz"\n    tar -zcvf $dest $src\n    cp $dest /backups\n  every: 0 16 * * *\n')),(0,o.kt)("p",null,"Now save and close the file."),(0,o.kt)("p",null,"This will create a job called ",(0,o.kt)("inlineCode",{parentName:"p"},"backup")," that will run every day at 4pm. It works by compacting ",(0,o.kt)("inlineCode",{parentName:"p"},"/myproject")," and storing the binaries at ",(0,o.kt)("inlineCode",{parentName:"p"},"/backups"),"."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Note that this job will run on every connected daemon at the specified time.")),(0,o.kt)("p",null,"If you want to manually run the job you can call like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"runlet @run backup\n")),(0,o.kt)("p",null,"You should expect a file created at ",(0,o.kt)("inlineCode",{parentName:"p"},"/backups"),"."),(0,o.kt)("h3",{id:"automating-backup-of-arbitrary-directories"},"Automating backup of arbitrary directories"),(0,o.kt)("p",null,"But what if we want to backup arbitrary directories? We can do that using ",(0,o.kt)("a",{parentName:"p",href:"/docs/job/definition"},"job arguments"),". By passing arguments you can change the behavior of a job before executing it. We use Golang\u2019s strong template engine to process every job script."),(0,o.kt)("p",null,"Change the job to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'backup:\n  script: |\n    {{ if gt (len .Args) 1 }}\n    src="{{ index .Args 1 }}"\n    {{ else }}\n    src="/myproject"\n    {{ end }}\n\n    hash=$(echo -n $src | md5sum | cut -c-32)\n    timestamp=$(date +"%m-%d-%Y-%H-%M")\n    dest="/tmp/$hash-$timestamp.tar.gz"\n    tar -zcvf $dest $src\n    cp $dest /backups\n  every: 0 16 * * *\n')),(0,o.kt)("p",null,"As we can see on line 3 we check if there are any arguments passed during the call. If we have, we use it as ",(0,o.kt)("inlineCode",{parentName:"p"},"src"),", otherwise we defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"/myproject"),". We can then call from the command line like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"runlet @run backup /myproject/node_modules\n")),(0,o.kt)("p",null,"We will then backup only the selected directory."))}d.isMDXComponent=!0}}]);